# 生活不会突变，你要做的只是耐心和积累。人这一辈子没法做太多的事情，所以每一件尽力而为。
# -*- coding: utf-8 -*-

content = '''
Python3 高级开发工程师 上海互教教育科技有限公司上海-浦东新区2万/月02-18满员
测试开发工程师（C++/python） 上海墨鹍数码科技有限公司上海-浦东新区2.5万/每月02-18未满员
Python3 开发工程师 上海德拓信息技术股份有限公司上海-徐汇区1.3万/每月02-18剩余11人
测试开发工程师（Python） 赫里普（上海）信息科技有限公司上海-浦东新区1.1万/每月02-18剩余5人
Python高级开发工程师 上海行动教育科技股份有限公司上海-闵行区2.8万/月02-18剩余255人
python开发工程师 上海优似腾软件开发有限公司上海-浦东新区2.5万/每月02-18满员
'''
## 非正则提取薪资：
# 将文本内容按行放入列表
lines = content.splitlines()
for line in lines:
    # 查找'万/月' 在 字符串中什么地方
    pos2 = line.find('万/月')
    if pos2 < 0:
        # 查找'万/每月' 在 字符串中什么地方
        pos2 = line.find('万/每月')
        # 都找不到
        if pos2 < 0:
            continue

    # 执行到这里，说明可以找到薪资关键字
    # 接下来分析 薪资 数字的起始位置
    # 方法是 找到 pos2 前面薪资数字开始的位置
    idx = pos2-1

    # 只要是数字或者小数点，就继续往前面找
    while line[idx].isdigit() or line[idx]=='.':
        idx -= 1

    # 现在 idx 指向 薪资数字前面的那个字，
    # 所以薪资开始的 索引 就是 idx+1
    pos1 = idx + 1

    print(line[pos1:pos2])

print('============')
## 正则提取：
import re
s = re.compile(r'([\d.]+)万/每{0,1}月')
for one in  s.findall(content):
    print(one)


### 正则表达式;

'''
	. : 匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 '\n' 在内的任何字符，请使用像"(.|\n)"的模式。(. 表示要匹配除了 换行符 之外的任何 单个 字符。)
	
'''
s='''苹果,是绿色的
	 橙子,是橙色的
	 香蕉,是黄色的
	 乌鸦,是黑色的'''
r=re.compile(r',.*')
print(r.findall(s))

r=re.compile(r'(.|\n)')
print(r.findall(s))

'''
	*:匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。

	+:匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
	
	{n,m}:m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。
	
	{n,}: 至少匹配 n 次
	
	{,m}：至多匹配 m 次
	
	\d : 匹配 0-9 之间任意数字字符 [0-9]
	
	\D : 匹配非数字字符 [^0-9]
	
	\s : 匹配任意空白字符 空格，tab, 换行符
	
	\S : 匹配任意非空白字符
	
	\w : 匹配文字字符，包括大小写字母，数字，下划线 [a-zA-Z0-9_]
	
	\W : 匹配非文字字符， [^a-zA-Z0-9_] 缺省情况也包括 Unicode文字字符，如果指定 ASCII 码标记，则只包括ASCII字母
	
	
'''
s='''
	王亚辉
	tony
	刘明

'''
r=re.compile(r'\w{2,4}')
print(r.findall(s))

print(re.compile(r'\w{2,4}',re.ASCII).findall(s))  ## 只匹配英文

'''
	方括号是单个匹配 字符集/排除字符集/命名字符集(一个方括号代表匹配一个字符)
		1、[0-3]，表示找到一个位置上的字符只能是0到3折四个数字，与（abc|bcd|cde）的作用比较类似，但圆括号可以匹配多个连续的字符而一对方括号只能匹配单个字符
	
	    2、[^0-3] 表示找到这个位置上字符只能是除了0到3之外的所有字符
	    
	    3、[a-z] 可以匹配 'a' 到 'z' 范围内的任意小写字母字符。
	    
	    4、方括号表示要匹配 指定的几个字符之一 。
	       [abc] 可以匹配 a, b, 或者 c 里面的任意一个字符。等价于 [a-c] 。
	       [akm.] 匹配 a k m . 里面任意一个字符，这里 . 在括号里面不在表示 匹配任意字符了，而就是表示匹配 . 这个 字符。
	       
	       [^a-g] 如果在方括号中使用 ^ ， 表示 非 方括号里面的字符集合。

'''
print(re.compile(r'1[3-7]\d{9}').findall('14789803453'),'\n')


content = 'a1b2c3d4e5'
import re
p = re.compile(r'[^\d]' )     ## [^\d] 表示，选择非数字的字符
for one in  p.findall(content):
	print(one)


'''
	^ 表示匹配文本的 开头 位置。

	正则表达式可以设定 单行模式 和 多行模式
	
	如果是 单行模式 ，表示匹配 整个文本 的开头位置。
	
	如果是 多行模式 ，表示匹配 文本每行 的开头位置。
	
'''
content = '''001-苹果价格-60
002-橙子价格-70
003-香蕉价格-80'''

import re
p = re.compile(r'^\d+', re.M)
for one in  p.findall(content):
	print(one)

p = re.compile(r'\d+$', re.M)
for one in  p.findall(content):
	print(one)

'''
	括号称之为 正则表达式的 组选择。
	
	组 就是把 正则表达式 匹配的内容 里面 其中的某些部分 标记为某个组。
	
	我们可以在 正则表达式中 标记 多个 组
'''
content = '''苹果，苹果是绿色的
橙子，橙子是橙色的
香蕉，香蕉是黄色的'''

import re
p = re.compile(r'^(.*)，', re.MULTILINE)
for one in  p.findall(content):
	print(one)
	
print('==============')

content = '''张三，手机号码15945678901
李四，手机号码13945677701
王二，手机号码13845666901'''

import re
p = re.compile(r'^(.+)，.+(\d{11})', re.MULTILINE)
for one in  p.findall(content):
	print(one)

## 当有多个分组的时候，我们可以使用 (?P<分组名>...) 这样的格式，给每个分组命名。
content = '''张三，手机号码15945678901
李四，手机号码13945677701
王二，手机号码13845666901'''

import re
p = re.compile(r'^(?P<name>.+)，.+(?P<phone>\d{11})', re.MULTILINE)
for match in  p.finditer(content):
	print(match.group('name'))
	print(match.group('phone'))
	


### 让点匹配换行:  点 是 不匹配换行符 的，可是有时候，特征 字符串就是跨行的.

content = '''
<div class="el">
		<p class="t1">
            <span>
                <a>Python开发工程师</a>
            </span>
        </p>
        <span class="t2">南京</span>
        <span class="t3">1.5-2万/月</span>
</div>
<div class="el">
        <p class="t1">
            <span>
                <a>java开发工程师</a>
            </span>
		</p>
        <span class="t2">苏州</span>
        <span class="t3">1.5-2/月</span>
</div>
'''
## 作为单行处理， 需要 .*？表示 表示多行内容。添加  re.DOTALL 参数。
import re
p = re.compile(r'class="t1">.*?<a>(.*?)</a>', re.DOTALL)
for one in  p.findall(content):
	print(one)

### 作为多行处理，re.M
p=re.compile(r'<a>(.*?)</a>',re.M)
for i in p.findall(content):
	print(i)



### 字符串 对象的 split 方法只适用于 简单的字符串分割。
##  re.split():适应单行或者多行匹配原则

names = '关羽; 张飞, 赵云,马超, 黄忠  李逵'
namelist = re.split(r'[;,\s]\s*', names)
print(namelist)


names = '''关羽; 张飞, 赵云,
马超, 黄忠  李逵'''

namelist=re.compile(r'[;,\s]\s*',re.M)
for i in namelist.split(names):
	print(i)
	
p=re.split(r'[;,\s]\s*',names)
print(p)


## 替换字符串
names = '''

下面是这学期要学习的课程：

<a href='https://www.bilibili.com/video/av66771949/?p=1' target='_blank'>点击这里，边看视频讲解，边学习以下内容</a>
这节讲的是牛顿第2运动定律

<a href='https://www.bilibili.com/video/av46349552/?p=125' target='_blank'>点击这里，边看视频讲解，边学习以下内容</a>
这节讲的是毕达哥拉斯公式

<a href='https://www.bilibili.com/video/av90571967/?p=33' target='_blank'>点击这里，边看视频讲解，边学习以下内容</a>
这节讲的是切割磁力线
'''

newStr = re.sub(r'/av\d+?/', '/cn345677/' , names)
print(newStr)


## 指定替换函数：
names = '''

下面是这学期要学习的课程：

<a href='https://www.bilibili.com/video/av66771949/?p=1' target='_blank'>点击这里，边看视频讲解，边学习以下内容</a>
这节讲的是牛顿第2运动定律

<a href='https://www.bilibili.com/video/av46349552/?p=125' target='_blank'>点击这里，边看视频讲解，边学习以下内容</a>
这节讲的是毕达哥拉斯公式

<a href='https://www.bilibili.com/video/av90571967/?p=33' target='_blank'>点击这里，边看视频讲解，边学习以下内容</a>
这节讲的是切割磁力线
'''

# 替换函数，参数是 Match对象
def subFunc(match):
	# Match对象 的 group(0) 返回的是整个匹配上的字符串
	src = match.group(0)
	
	# Match对象 的 group(1) 返回的是第一个group分组的内容
	number = int(match.group(1)) + 6
	dest = f'/av{number}/'
	
	print(f'{src} 替换为 {dest}')
	
	# 返回值就是最终替换的字符串
	return dest

newStr = re.sub(r'/av(\d+?)/', subFunc, names)
print(newStr)

print('================= 匹配诗文 ===============')
content='''第113回  混江龙太湖小结义  宋公明苏州大会垓
诗曰：
不识存亡妄逞能，吉凶祸福并肩行。
只知武士戡离乱，未许将军见太平。
自课赤心无谄屈，岂知天道不昭明。
韩彭功业人难辨，狡兔身亡猎犬烹。
话说当下众将救起宋江，半晌方才苏醒，对吴用等说道：“我们今番必然收伏不得方腊了。自从渡江以来，如此不利，连连损折了我八个弟兄！”吴用劝道：“主帅休说此言，以懈军心。当初破大辽之时，大小完全回京，皆是天数。今番折了兄弟们，此是各人寿数。眼见得渡江以来，连得了三个大郡，润州、常州、宣州，此乃皆是天子洪福齐天，主将之虎威，如何不利？先锋何故自丧志气？”宋江道：“军师言之极当。虽然天数将尽，我想一百八人上应列宿，又合天文所载。兄弟们过如手足之亲。今日听了这般凶信，不由我不伤心！”吴用再劝道：“主将请休烦恼，勿伤贵体。且请理会调兵接应，攻打无锡县。”宋江道：“留下柴大官人与我做伴。别写军帖，使戴院长与我送去，回复卢先锋，着令进兵攻打湖州，早至杭州聚会。”吴用教裴宣写了军帖回复，使戴宗往宣州去了，不在话下。
却说吕师囊引着许定，逃回至无锡县，正迎着苏州三大王发来救应军兵，为头是六军指挥使卫忠，带十数个牙将，引兵一万，来救常州，合兵一处，守住无锡县。吕枢密诉说金节献城一事，卫忠道：“枢密宽心，小将必然再要恢复常州。”只见探马报道：“宋军至近，早作准备。”卫忠便引兵上马，出北门外迎敌，早见宋江军马势大，为头是黑旋风李逵，引着鲍旭、项充、李衮当先，直杀过来。卫忠力怯难加，军马不曾摆成行列，大败而走。急退入无锡县时，四个早随马后入县治。吕枢密便奔南门而走。关胜引着兵马已夺了无锡县，四下里放起火来。卫忠、许定亦望南门走了，都回苏州去了。关胜等得了县治，便差人飞报宋先锋。宋江与众头领都到无锡县，便出榜安抚了本处百姓，复为良民。引大队军马，都屯驻在本县。却使人申请张、刘二总兵镇守常州。'''

import regex as re
##  regex模式下： [\u4e00-\u9fa5]+ 匹配一个或copy多个中文 [\u4e00-\u9fa5] 只匹配一个中文

r=re.compile(r'^[\u4e00-\u9fa5]{7}，[\u4e00-\u9fa5]{7}。$',re.M)
for i in r.findall(content):
	print(i)


print('=========== 提取书名号及其内容 =========')

s1='''s='993824640221613122993824《“健康北京”今晚关注校园防控措施》158910879420126349667473192010801000002801920200510 19063420200510 190620200510229938242299382430103158910879410101032044842862131341769531204484286213《北京市委十二届十三次全会于5月15日召开》1589108340101126458712327192010806107331010011801920200510 18590020200510 1859202005102044842862132044842862133610733010115891083402010101225125681967771988405883122512568196《蔡奇视频会见德国戴姆勒股份公司董事长》1589108320401578915514605128072061073310100012301920200510 18584020200510 1858202005102251256819622512568196361073301011589108320301010121654596760091216545967600913121654596760091《北京软件和信息服务业呈现产业发展韧性 在线新经济凸显活力》158910824200191008318148083361073310110030501920200510 18572220200510 1857202005102165459676009121654596760091361073301031589108242401010320722207223120722《北京国资公司坚持“两手抓”确保营业收入稳增长》158910819500152'''

p=re.compile(r'《.*?》')
for i in p.findall(s1):
	print(i)
	
